---
- name: Setting the ports to enable connections for
  set_fact:
    db_ports: "{{ provision_items | map(attribute='provision_params') | map(attribute='port') | list }}"

- name: Creating a database subnet group
  delegate_to: localhost
  rds_subnet_group:
    state: present
    name: "{{ rds_subnet_group_name }}"
    region: "{{ region }}"
    description: Stackmate RDS subnet group
    subnets:
      - "{{ main_vpc_subnet_id }}"
      - "{{ alternative_vpc_subnet_id }}"
    aws_access_key: "{{ providers.aws.access_key }}"
    aws_secret_key: "{{ providers.aws.secret }}"
    security_token: "{{ providers.aws.token }}"
  ignore_errors: True

# Creating the security group to be attached to new instances
- name: Getting the IP for Stackmate.io
  delegate_to: localhost
  command: 'dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com'
  register: stackmate_ip
  no_log: yes
  when: true

- name: Setting up the security group to allow access to Stackmate
  delegate_to: localhost
  ec2_group:
    name: "{{ stackmate_security_group }}"
    description: Allow SSH access to Stackmate
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_access_key: "{{ providers.aws.access_key }}"
    aws_secret_key: "{{ providers.aws.secret }}"
    security_token: "{{ providers.aws.token }}"
    purge_rules: yes
    rules:
      - proto: tcp
        ports: "{{ db_ports }}"
        cidr_ip: "{{ stackmate_ip.stdout | replace('\"', '') }}/32"
        rule_desc: Allow SSH access to Stackmate
    tags:
      Name: "{{ stackmate_security_group }}"
  register: stackmate_sg
  when: stackmate_ip is success
  tags:
    - stackmate-enabler

- name: Determining the VPC CIDR to use
  delegate_to: localhost
  ec2_vpc_net_info:
    vpc_ids: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_access_key: "{{ providers.aws.access_key }}"
    aws_secret_key: "{{ providers.aws.secret }}"
    security_token: "{{ providers.aws.token }}"
  register: vpc_info

- name: Fetching the default security group
  delegate_to: localhost
  ec2_group_info:
    region: "{{ region }}"
    aws_access_key: "{{ providers.aws.access_key }}"
    aws_secret_key: "{{ providers.aws.secret }}"
    security_token: "{{ providers.aws.token }}"
    filters:
      group-name: default
      vpc-id: "{{ vpc_id }}"
  register: default_sg_info

- name: Setting the VPC CIDR & default security group
  set_fact:
    vpc_info: "{{ vpc_info.vpcs | first }}"
    default_sg: "{{ default_sg_info.security_groups | first }}"

- name: Creating the security group for the database instances
  delegate_to: localhost
  ec2_group:
    name: "{{ databases_security_group }}"
    description: Allow incoming connections to the database instances from within the VPC
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    aws_access_key: "{{ providers.aws.access_key }}"
    aws_secret_key: "{{ providers.aws.secret }}"
    security_token: "{{ providers.aws.token }}"
    purge_rules: yes
    purge_tags: yes
    # inbound rules, by default, all outbound traffic is allowed
    rules:
      - proto: all
        ports: "{{ db_ports }}"
        cidr_ip: "{{ vpc_info.cidr_block }}"
        rule_desc: VPC incoming connections
    tags:
      Name: "{{ databases_security_group }}"
  register: databases_sg
